"""
Helper data for image_data_parser tests
"""
scanline_pixels_by_bit_depth = {
    1: {
        'greyscale': [
            (0,), (1,), (1,), (0,), (0,), (0,), (0,), (1,), (1,), (1,),
            (1,), (1,), (1,), (0,), (0,), (1,), (1,), (0,), (1,), (1,),
            (1,), (0,), (0,), (0,), (0,), (1,), (0,), (0,), (1,), (0,),
            (1,), (1,), (1,), (1,), (0,), (0,), (0,), (0,), (1,), (1,),
        ],
        'indexed': [
            (0,), (1,), (1,), (0,), (0,), (0,), (1,), (0,), (0,), (1,),
            (0,), (1,), (0,), (1,), (1,), (1,), (1,), (0,), (0,), (1,),
            (1,), (1,), (0,), (1,), (0,), (1,), (1,), (1,), (1,), (1,),
            (1,), (0,), (1,), (0,), (0,), (0,), (0,), (1,), (0,), (0,),
        ],
    },
    2: {
        'greyscale': [
            (0,), (1,), (2,), (0,), (2,), (0,), (0,), (0,), (3,), (0,),
            (1,), (1,), (3,), (2,), (1,), (3,), (0,), (0,), (3,), (0,),
            (2,), (2,), (1,), (3,), (0,), (3,), (1,), (1,), (3,), (2,),
            (0,), (2,), (0,), (1,), (0,), (1,), (0,), (3,), (0,), (2,),
        ],
        'indexed': [
            (1,), (0,), (2,), (3,), (2,), (3,), (1,), (1,), (3,), (2,),
            (1,), (2,), (0,), (1,), (0,), (3,), (2,), (1,), (2,), (0,),
            (0,), (3,), (3,), (3,), (0,), (2,), (0,), (1,), (0,), (0,),
            (3,), (2,), (2,), (2,), (3,), (2,), (1,), (1,), (2,), (2,),
        ],
    },
    4: {
        'greyscale': [
            (4,), (1,), (7,), (3,), (14,), (9,), (1,), (13,), (5,),
            (12,), (6,), (0,), (1,), (9,), (9,), (0,), (13,), (14,),
            (15,), (2,), (6,), (3,), (15,), (3,), (11,), (2,), (9,),
            (7,), (6,), (0,), (1,), (1,), (15,), (12,), (6,), (8,),
            (10,), (14,), (1,), (8,),
        ],
        'indexed': [
            (15,), (2,), (11,), (13,), (4,), (11,), (15,), (4,), (14,),
            (5,), (10,), (5,), (15,), (3,), (1,), (10,), (13,), (11,),
            (3,), (5,), (10,), (9,), (6,), (4,), (12,), (14,), (12,),
            (12,), (2,), (8,), (9,), (3,), (3,), (1,), (10,), (7,), (8,),
            (12,), (7,), (7,),
        ],
    },
    8: {
        'greyscale': [
            (26,), (165,), (200,), (79,), (132,), (212,), (167,),
            (186,), (19,), (0,), (64,), (22,), (186,), (59,), (94,),
            (94,), (118,), (58,), (23,), (122,), (163,), (240,),
            (205,), (93,), (120,), (207,), (223,), (238,), (251,),
            (45,), (127,), (176,), (60,), (53,), (249,), (214,), (33,),
            (73,), (202,), (224,),
        ],
        'greyscale_alpha': [
            (204, 158), (226, 223), (202, 60), (211, 136),
            (71, 117), (120, 227), (0, 96), (116, 188), (70, 90),
            (69, 240), (106, 232), (174, 120), (107, 184),
            (163, 120), (192, 251), (211, 20), (80, 146),
            (249, 36), (139, 196), (218, 208), (120, 109),
            (72, 107), (233, 171), (13, 44), (255, 26),
            (82, 131), (191, 42), (213, 26), (150, 106),
            (229, 67), (56, 155), (16, 240), (180, 211),
            (84, 39), (79, 250), (86, 11), (184, 229),
            (235, 171), (107, 69), (121, 27),
        ],
        'indexed': [
            (7,), (172,), (252,), (221,), (179,), (162,), (66,), (52,),
            (202,), (198,), (216,), (228,), (124,), (125,), (12,), (92,),
            (178,), (104,), (107,), (89,), (97,), (230,), (32,), (85,),
            (225,), (175,), (178,), (243,), (141,), (63,), (51,), (57,),
            (66,), (40,), (4,), (196,), (80,), (91,), (26,), (34,),
        ],
        'rgb': [
            (234, 170, 57), (66, 57, 109), (19, 81, 146), (171, 6, 162),
            (35, 180, 187), (186, 118, 254), (118, 40, 69), (153, 84, 166),
            (169, 120, 35), (15, 157, 208), (38, 230, 138), (170, 216, 1),
            (20, 226, 56), (156, 37, 186), (79, 16, 84), (49, 132, 179),
            (130, 197, 62), (119, 22, 14), (91, 111, 56), (86, 31, 147),
            (173, 17, 22), (72, 169, 251), (169, 63, 77), (68, 159, 196),
            (60, 194, 235), (98, 224, 1), (159, 125, 173), (144, 167, 147),
            (194, 160, 58), (235, 195, 191), (45, 126, 154), (138, 173, 251),
            (219, 29, 99), (81, 184, 41), (67, 2, 222), (183, 130, 17),
            (55, 248, 157), (137, 153, 106), (240, 8, 107), (152, 233, 106),
        ],
        'rgb_alpha': [
            (128, 244, 181, 133), (92, 10, 213, 22), (180, 63, 235, 57),
            (184, 101, 61, 74), (1, 22, 104, 168), (143, 209, 113, 112),
            (64, 24, 3, 129), (22, 40, 39, 19), (15, 112, 116, 218),
            (245, 36, 60, 91), (209, 16, 33, 81), (236, 122, 58, 153),
            (32, 163, 185, 42), (64, 71, 126, 186), (121, 162, 228, 0),
            (125, 190, 135, 119), (198, 129, 92, 208), (166, 175, 176, 59),
            (160, 94, 37, 230), (198, 16, 71, 196), (120, 234, 176, 154),
            (203, 219, 145, 138), (70, 235, 57, 132), (69, 108, 174, 183),
            (233, 247, 44, 41), (206, 179, 148, 52), (107, 163, 49, 84),
            (158, 128, 114, 172), (178, 98, 165, 186), (175, 85, 47, 124),
            (168, 180, 36, 22), (248, 111, 44, 200), (222, 82, 241, 104),
            (161, 126, 107, 5), (50, 54, 219, 208), (130, 212, 65, 155),
            (4, 0, 245, 212), (36, 165, 19, 126), (192, 125, 219, 201),
            (120, 8, 98, 88),
        ],
    },
    16: {
        'greyscale': [
            (63472,), (20146,), (38107,), (242,), (10274,), (6550,),
            (25092,), (45063,), (15814,), (35452,), (1348,), (46536,),
            (22931,), (30595,), (48223,), (26968,), (29409,),
            (46987,), (39629,), (29140,), (43983,), (39335,), (4331,),
            (29754,), (18226,), (2284,), (40578,), (42394,), (32107,),
            (52375,), (28948,), (19277,), (6819,), (13800,), (27914,),
            (34198,), (7276,), (56843,), (34617,), (10962,),
        ],
        'greyscale_alpha': [
            (31153, 39499), (28037, 16842), (22720, 15360), (2491, 38128),
            (32315, 15636), (24588, 2093), (34931, 18795), (48492, 56559),
            (56014, 51614), (13607, 34497), (52652, 11355), (8605, 23482),
            (18797, 25903), (1484, 55922), (41280, 57618), (41240, 40236),
            (60743, 61957), (26294, 35738), (8119, 63591), (60713, 25109),
            (9715, 43197), (62559, 38966), (993, 6415), (56539, 46077),
            (1862, 53403), (23401, 28636), (57383, 39100), (32603, 49669),
            (5096, 25339), (21914, 63243), (2085, 18344), (26684, 2424),
            (11919, 1948), (45222, 11518), (5480, 38282), (25021, 16534),
            (28656, 62358), (21675, 15826), (36056, 59124), (41614, 60594)
        ],
        'rgb': [
            (10087, 22146, 26182), (46879, 59110, 22327),
            (43266, 53477, 54967), (24416, 22525, 5734),
            (57722, 22091, 39111), (7941, 45665, 62620),
            (26855, 63820, 48212), (13995, 46919, 21171),
            (37140, 42920, 61569), (41275, 47995, 59577),
            (13202, 732, 56574), (5529, 51191, 61305),
            (17419, 74, 42103), (60125, 33740, 6588),
            (44220, 39981, 19874), (13582, 46336, 55477),
            (65195, 17521, 5420), (63539, 56762, 59405),
            (23927, 53345, 45305), (27304, 32147, 51352),
            (32161, 25987, 29192), (16356, 28808, 63386),
            (24894, 42021, 10673), (42541, 54919, 18287),
            (8950, 25540, 13637), (29375, 36041, 6951),
            (59713, 2534, 18041), (61790, 47858, 7224),
            (1387, 30197, 11575), (29160, 21033, 43167),
            (60021, 13706, 13548), (4067, 34241, 30954),
            (18410, 9412, 51922), (14702, 14449, 47809),
            (12349, 7695, 34015), (46655, 49560, 16307),
            (7292, 51771, 8616), (12271, 44292, 56977),
            (628, 5446, 22302), (41446, 56468, 12871),
        ],
        'rgb_alpha': [
            (31311, 5798, 36413, 63723), (22425, 44896, 51480, 17130),
            (36837, 60182, 52219, 40148), (51140, 8116, 38468, 48463),
            (15314, 148, 57272, 55345), (49633, 48110, 13761, 64294),
            (51917, 8378, 16814, 27547), (27291, 56204, 735, 17793),
            (9753, 1847, 54252, 27130), (19679, 65130, 1164, 27512),
            (63754, 52417, 50291, 18331),
            (21587, 56660, 55572, 13770), (56031, 8388, 60915, 17859),
            (1059, 2076, 63733, 11590), (37751, 24033, 53858, 29986),
            (23630, 37558, 59010, 57505), (61285, 58608, 57618, 29700),
            (10123, 22873, 48742, 15515), (14711, 46102, 30450, 52487),
            (54438, 43077, 52633, 35085), (51566, 27500, 14647, 26225),
            (50783, 59044, 50529, 64121), (15311, 25720, 15700, 5588),
            (46292, 28743, 44072, 20979), (42145, 11476, 63067, 4024),
            (35560, 26887, 31972, 59107), (14257, 43654, 20811, 13874),
            (55325, 7810, 40677, 17025), (1847, 20467, 56406, 1973),
            (60945, 13056, 17900, 5817), (63493, 9916, 55750, 34850),
            (25233, 38712, 4789, 23433), (38784, 60460, 40652, 14525),
            (35925, 41147, 27362, 53207), (43418, 29700, 26783, 3942),
            (4378, 55471, 53509, 61172), (15539, 9258, 9437, 5598),
            (42578, 57614, 4991, 13875), (3763, 18058, 37090, 53944),
            (54605, 17238, 32667, 12295),
        ],
    },
}



def scanline_filter_sub(bytes_per_pixel, scanline):
    bpp = bytes_per_pixel
    def raw(pos):
        if pos < 0:
            return 0
        return scanline[pos]
    def sub(pos):
        return (raw(pos) - raw(pos - bpp)) % 256
    return bytes(sub(pos) for pos in range(len(scanline)))


def scanline_filter_up(scanline, prior_unfiltered_scanline):
    assert len(scanline) == len(prior_unfiltered_scanline)
    def prior(pos):
        return prior_unfiltered_scanline[pos]
    def raw(pos):
        return scanline[pos]
    def upper(pos):
        return (raw(pos) - prior(pos)) % 256
    return bytes(upper(pos) for pos in range(len(scanline)))


def scanline_filter_average(bytes_per_pixel, scanline,
                            prior_unfiltered_scanline):
    assert len(scanline) == len(prior_unfiltered_scanline)
    bpp = bytes_per_pixel
    def raw(pos):
        if pos < 0:
            return 0
        return scanline[pos]
    def prior(pos):
        return prior_unfiltered_scanline[pos]
    def average(pos):
        return (raw(pos) - ((raw(pos - bpp) - prior(pos)) // 2)) % 256
    return bytes(average(pos) for pos in range(len(scanline)))


def scanline_filter_paeth(bytes_per_pixel, scanline,
                          prior_unfiltered_scanline):
    assert len(scanline) == len(prior_unfiltered_scanline)
    bpp = bytes_per_pixel
    def raw(pos):
        if pos < 0:
            return 0
        return scanline[pos]
    def prior(pos):
        if pos < 0:
            return 0
        return prior_unfiltered_scanline[pos]
    def predictor(left, above, upperleft):
        pred = left + above - upperleft
        pred_left = abs(pred - left)
        pred_above = abs(pred - above)
        pred_upperleft = abs(pred - upperleft)
        if pred_left <= pred_above <= pred_upperleft:
            return left
        elif pred_above <= pred_upperleft:
            return above
        else:
            return upperleft
    def paeth(pos):
        return (
            raw(pos) - predictor(raw(pos - bpp), prior(pos), prior(pos - bpp))
        ) % 256
    return bytes(paeth(pos) for pos in range(len(scanline)))
